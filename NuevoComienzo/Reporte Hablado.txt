¡Claro\! He actualizado el informe para incluir las rutas específicas donde se encontraron los hallazgos y he añadido una sección detallando todos los comandos que se ejecutaron durante la auditoría.

-----

### **Informe Final de Auditoría de Seguridad – SITO UTSLP (Versión Detallada)**

#### **1. Información del Objetivo**

  * **Hostname:** `sito.utslp.edu.mx`
  * **Dirección IP:** `189.254.143.102`
  * **Tecnologías Identificadas:** Apache Tomcat/Coyote JSP engine 1.1, Java Server Pages (JSP), JavaScript, HTML.
  * [cite\_start]**Certificado SSL:** Se utiliza un certificado wildcard (`*.utslp.edu.mx`) emitido por "Starfield Secure Certificate Authority - G2", válido del 12 de marzo de 2025 al 13 de abril de 2026[cite: 6, 7, 8].

-----

#### **2. Pruebas y Ataques Éticos Realizados**

Se ejecutaron diversas pruebas para evaluar la seguridad del sistema, con los siguientes hallazgos:

##### **A. Hallazgos por Ruta Específica**

  * [cite\_start]**/ (Raíz del sitio):** Se encontraron múltiples archivos de índice: `index.html` e `index.jsp`[cite: 18].
  * **/javascript/utilities.js:** Se identificó un **backdoor ofuscado** en este archivo JavaScript. [cite\_start]Su código permite la activación mediante secuencias de teclas[cite: 62, 63, 64].
  * [cite\_start]**/javascript/scriptAnimaciones.js:** Archivo descargado y analizado en busca de credenciales, sin éxito[cite: 24, 25, 26].
  * [cite\_start]**/examples/jsp/:** Este directorio de ejemplos de Tomcat es **públicamente accesible** y lista múltiples archivos `.jsp` y `.html` que deberían eliminarse en un entorno de producción[cite: 5].
  * [cite\_start]**/manager/html:** Esta es la ruta del panel de administración de Tomcat que fue objeto de un ataque de fuerza bruta[cite: 3].

##### **B. Análisis de Backdoor y Fuga de Información**

  * [cite\_start]**Identificación:** Se encontró un backdoor en la ruta `/javascript/utilities.js`[cite: 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64].
  * **Decodificación de Información:** El análisis reveló datos internos sensibles:
      * [cite\_start]**Nombres y Roles:** "Equipo SITO", "Jose Tono Garcia", "Desarrollador, Lider de Proyecto" y "Danyel Sp"[cite: 4, 40].
      * [cite\_start]**Copyright y Alias:** Se encontró la cadena "copyright 2010 - ISCT \<b\>Danyel Sp\</b\> - @dnylsp - SpRanch"[cite: 1, 4].
      * [cite\_start]**Recursos Externos:** Se decodificaron URLs que apuntan a imágenes del equipo alojadas en `imageshack.us`[cite: 1, 2].

##### **C. Análisis de Vulnerabilidades Web (Resultados de Nikto)**

  * **Cabeceras de Seguridad Ausentes:**
      * [cite\_start]El sitio no cuenta con la cabecera `X-Frame-Options`, exponiéndolo a ataques de **Clickjacking**[cite: 16].
      * [cite\_start]Falta la cabecera `Strict-Transport-Security` (HSTS)[cite: 17].
      * [cite\_start]La cabecera `X-Content-Type-Options` no está configurada[cite: 18].
  * [cite\_start]**Métodos HTTP Inseguros:** El servidor informa que los métodos `PUT` y `DELETE` están permitidos[cite: 20, 21].

##### **D. Herramientas y Comandos Ejecutados**

  * **Reconocimiento e Información:**
      * [cite\_start]`openssl s_client`: Se usó para obtener y analizar en detalle el certificado SSL del servidor[cite: 6].
      * [cite\_start]`nmap`: Se ejecutaron múltiples escaneos para identificar puertos abiertos, filtrados y las versiones de los servicios (`-sS -sV -sC -p- -T4 -A`)[cite: 13, 31, 42].
      * [cite\_start]`wget`: Se utilizó para descargar archivos JavaScript directamente desde el servidor para su análisis offline (`wget https://sito.utslp.edu.mx/javascript/scriptAnimaciones.js`)[cite: 24].
      * [cite\_start]`curl`: Se usó para listar el contenido del directorio de ejemplos de Tomcat (`curl -k "https://sito.utslp.edu.mx/examples/jsp/"`) y para analizar el código fuente en busca de palabras clave como "password"[cite: 5, 44].
  * **Análisis de Vulnerabilidades:**
      * [cite\_start]`nikto`: Se lanzó un escaneo completo (`-C all`) para detectar vulnerabilidades web comunes y problemas de configuración del servidor[cite: 15].
      * [cite\_start]`js decode_backdoor.js` / `python3 decode_backdoor.py`: Se usaron scripts para decodificar las cadenas ofuscadas del backdoor[cite: 4, 40].
      * [cite\_start]`strings` y `grep`: Se utilizaron para buscar credenciales y cadenas de conexión a bases de datos en los archivos descargados[cite: 26, 43].
  * **Intentos de Explotación:**
      * `hydra`: Se ejecutó un ataque de fuerza bruta contra el login del administrador de Tomcat (`hydra -L users_custom.txt -P passes_custom.txt sito.utslp.edu.mx https-get /manager/html`). [cite\_start]El ataque **finalizó sin éxito**[cite: 3].
      * `curl -X PUT`: Se realizaron dos intentos para subir archivos al servidor. El primero con un archivo de texto (`-d "test" "https://sito.utslp.edu.mx/test.txt"`) y el segundo con una shell JSP (`-d @shell.jsp "https://sito.utslp.edu.mx/shell.jsp"`). [cite\_start]Ambos intentos **fueron denegados**[cite: 27, 28].

-----

#### **3. Pruebas y Ataques Éticos por Realizar (Pasos Siguientes)**

Basado en los hallazgos, se recomienda realizar las siguientes pruebas para una evaluación más profunda:

  * **Explotación de Ghostcat (CVE-2020-1938):** Dado que el servidor Tomcat utiliza el conector AJP en el puerto 8009 (actualmente filtrado), se debe intentar una explotación manual de la vulnerabilidad Ghostcat. Si es vulnerable, podría permitir a un atacante leer el contenido de cualquier archivo en el servidor web (como `/WEB-INF/web.xml`) o incluso ejecutar código de forma remota.
  * **Prueba de Concepto (PoC) de Clickjacking:** Desarrollar una página web externa que cargue `sito.utslp.edu.mx` en un `<iframe>` invisible. Esto demostrará cómo un atacante podría superponer botones falsos sobre la interfaz real para engañar a los usuarios.
  * **Enumeración Avanzada de Directorios:** Utilizar herramientas como `dirsearch` o `ffuf` con diccionarios especializados para servidores Java/Tomcat para buscar archivos de configuración críticos que no fueron encontrados con `gobuster` (ej. `/WEB-INF/web.xml`).
  * **Pruebas de Inyección (SQLi y XSS):** Realizar pruebas exhaustivas en todos los campos de entrada, especialmente en el formulario de login (que contiene el campo `xContrasena`), para detectar vulnerabilidades de inyección SQL y Cross-Site Scripting.
  * **Ingeniería Social Dirigida:** Utilizar la información de los desarrolladores obtenida del backdoor para crear diccionarios de contraseñas altamente personalizados y realizar ataques de `password spraying` o phishing dirigido en un escenario de prueba autorizado.
